version: '3.9'
services:
  authentication:
    build:
      context: auth-plus-authentication
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    command: npm start
    environment:
      - APP_NAME=auth-plus-authentication
      - PORT=5000
      - NODE_ENV=production
      - JWT_SECRET=dPBZ_CSWBApK&7EwL?!_%5dLjTK7An
      - DATABASE_HOST=database-auth
      - DATABASE_USER=root
      - DATABASE_PASSWORD=db_password
      - DATABASE_DATABASE=auth
      - DATABASE_PORT=5432
      - CACHE_URL=redis:6379
      - KAFKA_URL=kafka:9092
    restart: always
    networks:
      - symphony-net
    depends_on:
      - database-auth
      - cache
      - kafka

  billing:
    build:
      context: auth-plus-billing
      dockerfile: Dockerfile
    ports:
      - '5002:5002'
    command: ./kafka
    environment:
      - APP_NAME=auth-plus-billling
      - PORT=5002
      - RUST_ENV=production
      - DATABASE_HOST=postgres://root:db_password@database-billing:5433/billing
      - KAFKA_HOST=kafka:9092
    restart: always
    networks:
      - symphony-net
    depends_on:
      - database-billing
      - kafka
  
  client:
    build:
      context: auth-plus-client
      dockerfile: Dockerfile
    ports:
      - '5004:3000'
    command: node ./build/index.js
    restart: always
    networks:
      - symphony-net

  notification:
    build:
      context: auth-plus-notification
      dockerfile: Dockerfile
    ports:
      - '5001:5001'
    command: ./kafka_server
    environment:
      - APP_NAME=auth-plus-notification
      - APP_PORT=5001
      - GO_ENV=production
      - KAFKA_URL=kafka
      - KAFKA_PORT=9092
      - AWS_ACCESS_KEY_ID=YOUR_AKID
      - AWS_SECRET_ACCESS_KEY=YOUR_SECRET_KEY
      - AWS_SESSION_TOKEN=TOKEN
      - GOOGLE_APPLICATION_CREDENTIALS=/app/service-account-file.json
      - GOOGLE_APPLICATION_NAME=auth-plus-c2b74
      - MAILGUN_API_KEY=mailgun-api-key
      - ONESIGNAL_API_KEY=onesignal-api-key
      - SENDGRID_API_KEY=sendgrid-api-key
      - TELEGRAM_API_KEY=5198414170:AAFPd4v3t0ty5cnSRJFN_Qjxp-e7twVk8aA
      - TWILIO_ACCOUNT_SID=ACfd0573f9f976b99746c693947axxxxxx
      - TWILIO_AUTH_TOKEN=fe4fdcdb09e234bfb63a4091f8xxxxxx
    restart: always
    networks:
      - symphony-net
    depends_on:
      - kafka

  database-auth:
    image: postgres:15.1
    restart: always
    environment:
      - POSTGRES_PASSWORD=db_password
      - POSTGRES_USER=root
      - POSTGRES_DB=auth
    ports:
      - '5432:5432'
    volumes:    
      - v-database-auth:/var/lib/postgresql/data
    networks:
      - symphony-net

  database-billing:
    image: postgres:15.1
    restart: always
    environment:
      - POSTGRES_PASSWORD=db_password
      - POSTGRES_USER=root
      - POSTGRES_DB=billing
    ports:
      - '5433:5432'
    volumes:    
      - v-database-billing:/var/lib/postgresql/data
    networks:
      - symphony-net

  cache:
    container_name: redis
    image: redis:7.0.5
    hostname: redis
    restart: always
    volumes:
      - v-cache:/data
    ports:
      - '6379:6379'
    networks:
      - symphony-net

  cache-ui:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - '8081:8081'
    depends_on:
      - cache
    networks:
      - symphony-net

  # OBSERVABILITY 
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.40.5
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - v-metrics:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - symphony-net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  grafana:
    container_name: grafana
    image: grafana/grafana:9.3.1
    restart: always
    environment:
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    volumes:
      - ./config/grafana.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    networks:
      - symphony-net

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.17.8
    volumes:
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - v-elastic:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: -Xmx256m -Xms256m
      ELASTIC_PASSWORD: elk_password
      discovery.type: single-node
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - symphony-net

  logstash:
    container_name: logstash
    image: logstash:7.17.8
    restart: always
    volumes:
      - ./config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: -Xmx256m -Xms256m
    ports:
      - 5044:5044
    depends_on:
      - elasticsearch
    networks:
      - symphony-net

  kibana:
    container_name: kibana
    image: kibana:7.17.8
    restart: always
    depends_on:
      - elasticsearch
    volumes:
      - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    networks:
      - symphony-net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    restart: always
    environment:
      - STORAGE_TYPE=mem
    ports:
      - 9411:9411
    networks:
      - symphony-net
      
  # KAFKA
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.8.0
    networks:
      - symphony-net
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.3.1
    networks:
      - symphony-net
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'

  kafdrop:
    container_name: kafdrop
    restart: always
    image: obsidiandynamics/kafdrop:3.30.0
    networks:
      - symphony-net
    depends_on:
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:9092,localhost:9092

networks:
  symphony-net:
    driver: bridge

volumes:
  v-metrics:
  v-elastic:
  v-database-auth:
  v-database-billing:
  v-cache:
